{"version":3,"sources":["api/spaceX/launchesQuery.ts","pages/launches/Launches.tsx","hooks/launches/useInfiniteFetchLaunches.ts","App.tsx","index.tsx"],"names":["BASE_URL","optionsForQuery","page","options","sort","date_unix","populate","path","_key","a","axios","post","data","useInfiniteQuery","launchesQuery","getFetchMore","lastPage","nextPage","status","error","isFetchingMore","fetchMore","canFetchMore","loadMoreButtonRef","React","useRef","message","className","data-testid","map","query","docs","launch","name","id","type","ref","onClick","disabled","App","style","maxWidth","Launches","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAGMA,EAAW,6BAGXC,EAAkB,SAACC,GACvB,MAAO,CACLC,QAAS,CACPD,OACAE,KAAM,CAAEC,UAAW,QACnBC,SAAU,CACRC,KAAM,QACND,SAAU,CACR,CACEC,KAAM,aASlB,yCAAe,WAAOC,GAAP,+BAAAC,EAAA,6DAAqBP,EAArB,+BAA4B,EAA5B,SACUQ,IAAMC,KAAN,UAClBX,EADkB,sBAErBC,EAAgBC,IAHL,uBACLU,EADK,EACLA,KADK,kBAKNA,GALM,2CAAf,sDCrBe,aAAO,IAAD,ECEZC,YAAyC,WAAYC,EAAe,CACzEC,aAAc,SAACC,GAAD,OAAcA,EAASC,YDDrCC,EAFiB,EAEjBA,OACAN,EAHiB,EAGjBA,KACAO,EAJiB,EAIjBA,MACAC,EALiB,EAKjBA,eACAC,EANiB,EAMjBA,UACAC,EAPiB,EAOjBA,aAGIC,EAAoBC,IAAMC,SAEhC,MAAe,YAAXP,EAA6B,2CAC7BC,EAAc,2CAAcA,EAAMO,WAIpC,sBAAKC,UAAU,iBAAiBC,cAAY,gBAA5C,UACE,0CACA,qCACE,oBAAIA,cAAY,gBAAhB,SACGhB,GACCA,EAAKiB,KAAI,SAACC,GAAD,OACP,cAAC,WAAD,UACGA,EAAMC,KAAKF,KAAI,SAACG,GAAD,OACd,6BAAgCA,EAAOC,MAAvC,gBAAkBD,EAAOE,SAF7B,cAAsBJ,EAAM5B,YAOlC,8BACE,wBACEiC,KAAK,SACLC,IAAK,kBAAMb,GACXc,QAAS,kBAAMhB,KACfiB,UAAWhB,KAAkBF,EAJ/B,SAMGA,EACG,kBACAE,EACA,YACA,kCEjCDiB,EARC,WACd,OACE,qBAAKZ,UAAU,wBAAwBa,MAAO,CAAEC,SAAU,QAA1D,SACE,cAACC,EAAD,OCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8b1de840.chunk.js","sourcesContent":["import axios from \"axios\";\nimport { Launch, Query } from \"./types\";\n\nconst BASE_URL = \"https://api.spacexdata.com\";\n\n/** The necessary query options, including sorting, pagination, and what child objects to include. */\nconst optionsForQuery = (page: number) => {\n  return {\n    options: {\n      page,\n      sort: { date_unix: \"desc\" },\n      populate: {\n        path: \"cores\",\n        populate: [\n          {\n            path: \"core\",\n          },\n        ],\n      },\n    },\n  };\n};\n\n/** Retrieve a paginated list of launches. */\nexport default async (_key: string, page = 1) => {\n  const { data } = await axios.post<Query<Launch[]>>(\n    `${BASE_URL}/v4/launches/query`,\n    optionsForQuery(page)\n  );\n  return data;\n};\n","import React, { Fragment } from \"react\";\nimport useInfiniteFetchLaunches from \"../../hooks/launches/useInfiniteFetchLaunches\";\n\nexport default () => {\n  const {\n    status,\n    data,\n    error,\n    isFetchingMore,\n    fetchMore,\n    canFetchMore,\n  } = useInfiniteFetchLaunches();\n\n  const loadMoreButtonRef = React.useRef<HTMLButtonElement>();\n\n  if (status === \"loading\") return <p>Loading...</p>;\n  if (error) return <span>Error: {error.message}</span>;\n\n  /* eslint-disable no-nested-ternary */\n  return (\n    <div className=\"Launches prose\" data-testid=\"launches-page\">\n      <h1>Launches</h1>\n      <>\n        <ul data-testid=\"launches-list\">\n          {data &&\n            data.map((query) => (\n              <Fragment key={`page${query.page}`}>\n                {query.docs.map((launch) => (\n                  <li key={`launch${launch.id}`}>{launch.name}</li>\n                ))}\n              </Fragment>\n            ))}\n        </ul>\n        <div>\n          <button\n            type=\"button\"\n            ref={() => loadMoreButtonRef}\n            onClick={() => fetchMore()}\n            disabled={!canFetchMore || !!isFetchingMore}\n          >\n            {isFetchingMore\n              ? \"Loading more...\"\n              : canFetchMore\n              ? \"Load More\"\n              : \"Nothing more to load\"}\n          </button>\n        </div>\n      </>\n    </div>\n  );\n};\n","import { useInfiniteQuery } from \"react-query\";\nimport launchesQuery from \"../../api/spaceX/launchesQuery\";\nimport { Launch, Query } from \"../../api/spaceX/types\";\n\nexport default () => {\n  return useInfiniteQuery<Query<Launch[]>, Error>(\"launches\", launchesQuery, {\n    getFetchMore: (lastPage) => lastPage.nextPage,\n  });\n};\n","import React, { FC } from \"react\";\nimport Launches from \"./pages/launches/Launches\";\n\nconst App: FC = () => {\n  return (\n    <div className=\"App container mx-auto\" style={{ maxWidth: \"65ch\" }}>\n      <Launches />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}